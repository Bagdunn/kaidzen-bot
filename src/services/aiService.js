const axios = require('axios');

class AIService {
  constructor() {
    this.apiKey = process.env.OPENAI_API_KEY || process.env.CLAUDE_API_KEY;
    this.apiUrl = process.env.OPENAI_API_URL || 'https://api.openai.com/v1/chat/completions';
    this.model = process.env.AI_MODEL || 'gpt-3.5-turbo';
  }

  async mergeContext(oldContextData, newContextData) {
    try {
      const prompt = `
–û–±'—î–¥–Ω–∞–π —Å—Ç–∞—Ä–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –Ω–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏, —Å—Ç–≤–æ—Ä—é—é—á–∏ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.

–°—Ç–∞—Ä–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Ç–µ–∫—Å—Ç):
${oldContextData || '–ö–æ–Ω—Ç–µ–∫—Å—Ç—É –Ω–µ–º–∞—î'}

–ù–æ–≤—ñ –¥–∞–Ω—ñ (—Ç–µ–∫—Å—Ç):
${newContextData}

–ü—Ä–∞–≤–∏–ª–∞ –æ–±'—î–¥–Ω–∞–Ω–Ω—è:
1. –ó–∞–ª–∏—à–∏ –≤—Å—é –≤–∞–∂–ª–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑—ñ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
2. –î–æ–¥–∞–π –Ω–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, –Ω–µ –¥—É–±–ª—é—é—á–∏ —ñ—Å–Ω—É—é—á—É
3. –ü–æ–∫—Ä–∞—â–∏ —Ç–∞ –¥–µ—Ç–∞–ª—ñ–∑—É–π –æ–ø–∏—Å, —è–∫—â–æ –Ω–æ–≤—ñ –¥–∞–Ω—ñ –¥–∞—é—Ç—å –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
4. –°—Ç—Ä—É–∫—Ç—É—Ä—É–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ JSON –∑ –ø–æ–ª—è–º–∏: about_me, goals, areas
5. –ü–æ–≤–µ—Ä–Ω–∏ —Ç—ñ–ª—å–∫–∏ JSON –æ–±'—î–∫—Ç –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É

–ü—Ä–∏–∫–ª–∞–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏:
{
  "about_me": "–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø—Ä–æ —Å–µ–±–µ, –¥–æ—Å–≤—ñ–¥, —ñ–Ω—Ç–µ—Ä–µ—Å–∏",
  "goals": "–¶—ñ–ª—ñ —Ç–∞ –ø–ª–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
  "areas": "–°—Ñ–µ—Ä–∏ –∂–∏—Ç—Ç—è –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è"
}

–û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
`;

      const response = await this.makeAIRequest(prompt);
      return JSON.parse(response);
    } catch (error) {
      console.error('‚ùå Error merging context:', error);
      // Fallback: –ø—Ä–æ—Å—Ç–æ –æ–±'—î–¥–Ω–∞—Ç–∏ –¥–∞–Ω—ñ
      return {
        about_me: newContextData || '',
        goals: '',
        areas: ''
      };
    }
  }

  async classifyMessage(message, previousBotMessage = null, context = null) {
    try {
      let contextInfo = '';
      if (context) {
        contextInfo = `
–ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
- –ü—Ä–æ —Å–µ–±–µ: ${context.about_me}
- –¶—ñ–ª—ñ: ${context.goals}
- –°—Ñ–µ—Ä–∏ –∂–∏—Ç—Ç—è: ${context.areas}
`;
      }

      const prompt = `
–ö–ª–∞—Å–∏—Ñ—ñ–∫—É–π –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram –±–æ—Ç—ñ.

–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: "${message}"

${previousBotMessage ? `–ü–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞: "${previousBotMessage}"` : '–ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ –Ω–µ–º–∞—î'}

${contextInfo}

–¢–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:
1. "answer" - –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –±–æ—Ç–∞
2. "context_update" - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å–≤—ñ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç/–ø—Ä–æ—Ñ—ñ–ª—å
3. "question_request" - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –¥–æ–¥–∞—Ç–∏ –≤–ª–∞—Å–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
4. "general_chat" - –∑–∞–≥–∞–ª—å–Ω–∞ —Ä–æ–∑–º–æ–≤–∞, –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è, –¥—è–∫—É–≤–∞–Ω–Ω—è
5. "help_request" - –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É, –ø–æ—è—Å–Ω–µ–Ω–Ω—è

–ü–æ–≤–µ—Ä–Ω–∏ —Ç—ñ–ª—å–∫–∏ JSON –æ–±'—î–∫—Ç:
{
  "type": "answer|context_update|question_request|general_chat|help_request",
  "confidence": 0.95,
  "reasoning": "–∫–æ—Ä–æ—Ç–∫–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è —á–æ–º—É —Å–∞–º–µ —Ü–µ–π —Ç–∏–ø"
}
`;

      const response = await this.makeAIRequest(prompt);
      return JSON.parse(response);
    } catch (error) {
      console.error('‚ùå Error classifying message:', error);
      return { type: 'general_chat', confidence: 0.5, reasoning: 'Error occurred' };
    }
  }

  async generateQuestions(context, previousAnswers = []) {
    try {
      const answersInfo = previousAnswers.length > 0 
        ? `–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${JSON.stringify(previousAnswers.slice(-3), null, 2)}`
        : '–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–µ–º–∞—î';

      const prompt = `
–ó–≥–µ–Ω–µ—Ä—É–π 3 –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –∫–∞–π–¥–∑–µ–Ω-–ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –π–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
- –ü—Ä–æ —Å–µ–±–µ: ${context.about_me}
- –¶—ñ–ª—ñ: ${context.goals}
- –°—Ñ–µ—Ä–∏ –∂–∏—Ç—Ç—è: ${context.areas}

${answersInfo}

–ü—Ä–∞–≤–∏–ª–∞:
1. –ü–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ —Ç–∞ –¥—ñ—î–≤–∏–º–∏
2. –í—Ä–∞—Ö–æ–≤—É–π —Ü—ñ–ª—ñ —Ç–∞ —Å—Ñ–µ—Ä–∏ –∂–∏—Ç—Ç—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
3. –ü–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω—ñ —Å–ø–æ–Ω—É–∫–∞—Ç–∏ –¥–æ —Ä–µ—Ñ–ª–µ–∫—Å—ñ—ó —Ç–∞ –¥—ñ—ó
4. –£–Ω–∏–∫–∞–π –∑–∞–≥–∞–ª—å–Ω–∏—Ö —Ñ—Ä–∞–∑, –±—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º
5. –ü–∏—Ç–∞–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é

–ü–æ–≤–µ—Ä–Ω–∏ —Ç—ñ–ª—å–∫–∏ JSON –º–∞—Å–∏–≤ –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏:
[
  "–ü–∏—Ç–∞–Ω–Ω—è 1",
  "–ü–∏—Ç–∞–Ω–Ω—è 2", 
  "–ü–∏—Ç–∞–Ω–Ω—è 3"
]
`;

      const response = await this.makeAIRequest(prompt);
      return JSON.parse(response);
    } catch (error) {
      console.error('‚ùå Error generating questions:', error);
      return [
        "–©–æ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –≤ —Å–≤–æ—î–º—É –∂–∏—Ç—Ç—ñ —Å—å–æ–≥–æ–¥–Ω—ñ?",
        "–Ø–∫–∞ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∞ —Ü—ñ–ª—å –¥–ª—è –≤–∞—Å –∑–∞—Ä–∞–∑?",
        "–©–æ –≤–∞—Å –Ω–∞–π–±—ñ–ª—å—à–µ –º–æ—Ç–∏–≤—É—î —Ä—É—Ö–∞—Ç–∏—Å—è –≤–ø–µ—Ä–µ–¥?"
      ];
    }
  }

  async analyzeAnswer(answer, question, context) {
    try {
      const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –¥–∞–π –∫–æ—Ä–∏—Å–Ω—ñ —ñ–Ω—Å–∞–π—Ç–∏.

–ü–∏—Ç–∞–Ω–Ω—è: "${question}"
–í—ñ–¥–ø–æ–≤—ñ–¥—å: "${answer}"

–ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
- –ü—Ä–æ —Å–µ–±–µ: ${context.about_me}
- –¶—ñ–ª—ñ: ${context.goals}
- –°—Ñ–µ—Ä–∏ –∂–∏—Ç—Ç—è: ${context.areas}

–ü–æ–≤–µ—Ä–Ω–∏ JSON –æ–±'—î–∫—Ç:
{
  "insights": [
    "–Ü–Ω—Å–∞–π—Ç 1 –ø—Ä–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
    "–Ü–Ω—Å–∞–π—Ç 2 –ø—Ä–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∏ –º–∏—Å–ª–µ–Ω–Ω—è"
  ],
  "suggestions": [
    "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è 1",
    "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è 2"
  ],
  "follow_up_questions": [
    "–î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è 1",
    "–î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è 2"
  ]
}
`;

      const response = await this.makeAIRequest(prompt);
      return JSON.parse(response);
    } catch (error) {
      console.error('‚ùå Error analyzing answer:', error);
      return {
        insights: ["–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–∫–∞–∑—É—î –≥–ª–∏–±–æ–∫–µ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è"],
        suggestions: ["–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ —Ä–µ—Ñ–ª–µ–∫—Å—É–≤–∞—Ç–∏ –Ω–∞–¥ —Å–≤–æ—ó–º–∏ —Ü—ñ–ª—è–º–∏"],
        follow_up_questions: ["–©–æ —â–µ –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ü—ñ—î—ó –º–µ—Ç–∏?"]
      };
    }
  }

  async makeAIRequest(prompt) {
    if (!this.apiKey) {
      throw new Error('AI API key not configured');
    }

    const payload = {
      model: this.model,
      messages: [
        {
          role: "system",
          content: "–¢–∏ - AI –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è Telegram –±–æ—Ç–∞ Kaizen Questions. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ç—ñ–ª—å–∫–∏ JSON –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 1000
    };

    const headers = {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${this.apiKey}`
    };

    console.log('ü§ñ AI Request:');
    console.log('   URL:', this.apiUrl);
    console.log('   Model:', this.model);
    console.log('   Prompt length:', prompt.length);

    const response = await axios.post(this.apiUrl, payload, { headers });
    
    console.log('‚úÖ AI Response:', response.status);
    
    const content = response.data.choices[0].message.content;
    return content.trim();
  }
}

module.exports = new AIService();
