const { Telegraf, Scenes, session } = require('telegraf');
const User = require('../models/User');
const Context = require('../models/Context');
const Question = require('../models/Question');
const Answer = require('../models/Answer');
const ReminderTime = require('../models/ReminderTime');
const aiService = require('../services/aiService');
const n8nService = require('../services/n8nService');
const questionService = require('../services/questionService');

// Create bot instance
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// Session middleware
bot.use(session());

// Store user states for multi-step interactions
const userStates = new Map();

// Store last bot messages for context
const lastBotMessages = new Map();

// Start command
bot.start(async (ctx) => {
  try {
    const telegramId = ctx.from.id;
    const username = ctx.from.username || ctx.from.first_name;
    
    // Register user automatically
    const user = await User.create(telegramId, username);
    
    const welcomeMessage = `
üéâ <b>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Kaizen Questions!</b>

–¶–µ –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º —â–æ–¥–Ω—è –∑–∞–¥–∞–≤–∞—Ç–∏ —Å–æ–±—ñ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è —Å–∞–º–æ—Ä–æ–∑–≤–∏—Ç–∫—É.

<b>–©–æ –≤–∏ –º–æ–∂–µ—Ç–µ —Ä–æ–±–∏—Ç–∏:</b>
‚Ä¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω—ñ –∫–∞–π–¥–∑–µ–Ω-–ø–∏—Ç–∞–Ω–Ω—è
‚Ä¢ –°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
‚Ä¢ –ù–∞–ª–∞—à—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó
‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å

<b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>
/settime - –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω—å
/addquestion - –¥–æ–¥–∞—Ç–∏ –≤–ª–∞—Å–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
/context - –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
/questions - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è
/answers - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π

–ü–æ—á–Ω–µ–º–æ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω—å! üïê
    `;
    
    await ctx.reply(welcomeMessage, { parse_mode: 'HTML' });
    
    // Store this message as last bot message
    lastBotMessages.set(telegramId, welcomeMessage);
    
    // Ask for preferred time
    const timeMessage = '‚è∞ –û–±–µ—Ä—ñ—Ç—å —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω—å (–º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–æ 3 —á–∞—Å—ñ–≤):';
    await ctx.reply(timeMessage, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üåÖ 07:00', callback_data: 'add_time_07:00' },
            { text: '‚òÄÔ∏è 09:00', callback_data: 'add_time_09:00' }
          ],
          [
            { text: 'üåû 12:00', callback_data: 'add_time_12:00' },
            { text: 'üåÜ 15:00', callback_data: 'add_time_15:00' }
          ],
          [
            { text: 'üåá 18:00', callback_data: 'add_time_18:00' },
            { text: 'üåÉ 21:00', callback_data: 'add_time_21:00' }
          ],
          [
            { text: 'üåô 22:00', callback_data: 'add_time_22:00' },
            { text: '‚è∞ –í–ª–∞—Å–Ω–∏–π —á–∞—Å', callback_data: 'custom_time' }
          ]
        ]
      }
    });
    
    // Store time selection message
    lastBotMessages.set(telegramId, timeMessage);
    
  } catch (error) {
    console.error('Error in start command:', error);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
});

// Set time command
bot.command('settime', async (ctx) => {
  try {
    const user = await User.findByTelegramId(ctx.from.id);
    if (!user) {
      return await ctx.reply('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é /start');
    }
    
    // Get current reminder times
    const currentReminders = await ReminderTime.findActiveByUserId(user.id);
    
    let message = '‚è∞ <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å</b>\n\n';
    message += '–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω—å (–º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–æ 3 —á–∞—Å—ñ–≤):\n\n';
    
    if (currentReminders.length > 0) {
      message += '<b>–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:</b>\n';
      currentReminders.forEach((reminder, index) => {
        message += `${index + 1}. ${reminder.time}\n`;
      });
      message += '\n';
    }
    
    // Create time selection buttons
    const timeButtons = [
      [
        { text: 'üåÖ 07:00', callback_data: 'add_time_07:00' },
        { text: '‚òÄÔ∏è 09:00', callback_data: 'add_time_09:00' }
      ],
      [
        { text: 'üåû 12:00', callback_data: 'add_time_12:00' },
        { text: 'üåÜ 15:00', callback_data: 'add_time_15:00' }
      ],
      [
        { text: 'üåá 18:00', callback_data: 'add_time_18:00' },
        { text: 'üåÉ 21:00', callback_data: 'add_time_21:00' }
      ],
      [
        { text: 'üåô 22:00', callback_data: 'add_time_22:00' },
        { text: '‚è∞ –í–ª–∞—Å–Ω–∏–π —á–∞—Å', callback_data: 'custom_time' }
      ]
    ];
    
    // Add management buttons if user has reminders
    if (currentReminders.length > 0) {
      // Add individual delete buttons for each reminder
      currentReminders.forEach((reminder, index) => {
        timeButtons.push([
          { text: `‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ ${reminder.time}`, callback_data: `remove_time_${reminder.id}` }
        ]);
      });
      
      timeButtons.push([
        { text: 'üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ', callback_data: 'remove_all_times' },
        { text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'done_times' }
      ]);
    }
    
    await ctx.reply(message, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: timeButtons
      }
    });
    lastBotMessages.set(ctx.from.id, message);
    
  } catch (error) {
    console.error('Error in settime command:', error);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
});

// Add question command
bot.command('addquestion', async (ctx) => {
  try {
    const user = await User.findByTelegramId(ctx.from.id);
    if (!user) {
      return await ctx.reply('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é /start');
    }
    
    const questionCount = await Question.getActiveQuestionsCount(user.id);
    if (questionCount >= 3) {
      return await ctx.reply('‚ùå –£ –≤–∞—Å –≤–∂–µ —î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–ª–∞—Å–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å (3). –í–∏–¥–∞–ª—ñ—Ç—å –æ–¥–Ω–µ –∑ —ñ—Å–Ω—É—é—á–∏—Ö –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ.');
    }
    
    userStates.set(ctx.from.id, { action: 'adding_question' });
    const message = 'üìù –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:';
    await ctx.reply(message);
    lastBotMessages.set(ctx.from.id, message);
    
  } catch (error) {
    console.error('Error in addquestion command:', error);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
});

// Context command
bot.command('context', async (ctx) => {
  try {
    const user = await User.findByTelegramId(ctx.from.id);
    if (!user) {
      return await ctx.reply('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é /start');
    }
    
    userStates.set(ctx.from.id, { action: 'setting_context', step: 'about_me' });
    const message = 'üë§ –†–æ–∑–∫–∞–∂—ñ—Ç—å –ø—Ä–æ —Å–µ–±–µ (—Ö—Ç–æ –≤–∏, —á–∏–º –∑–∞–π–º–∞—î—Ç–µ—Å—å):';
    await ctx.reply(message);
    lastBotMessages.set(ctx.from.id, message);
    
  } catch (error) {
    console.error('Error in context command:', error);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
});

// Questions command
bot.command('questions', async (ctx) => {
  try {
    const user = await User.findByTelegramId(ctx.from.id);
    if (!user) {
      return await ctx.reply('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é /start');
    }
    
    const questions = await Question.findByUserId(user.id, true);
    
    if (questions.length === 0) {
      const message = 'üìù –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø–∏—Ç–∞–Ω—å. –î–æ–¥–∞–π—Ç–µ –≤–ª–∞—Å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /addquestion –∞–±–æ –æ–Ω–æ–≤—ñ—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ—é /context –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è AI-–ø–∏—Ç–∞–Ω—å.';
      await ctx.reply(message);
      lastBotMessages.set(ctx.from.id, message);
      return;
    }
    
    let message = 'üìù <b>–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è:</b>\n\n';
    questions.forEach((question, index) => {
      const source = question.source === 'user' ? 'üë§' : 'ü§ñ';
      message += `${index + 1}. ${source} ${question.text}\n\n`;
    });
    
    await ctx.reply(message, { parse_mode: 'HTML' });
    lastBotMessages.set(ctx.from.id, message);
    
  } catch (error) {
    console.error('Error in questions command:', error);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
});

// Answers command
bot.command('answers', async (ctx) => {
  try {
    const user = await User.findByTelegramId(ctx.from.id);
    if (!user) {
      return await ctx.reply('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é /start');
    }
    
    const answers = await Answer.findByUserId(user.id, 10);
    
    if (answers.length === 0) {
      const message = 'üìä –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ —â–æ–¥–µ–Ω–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ç—É—Ç.';
      await ctx.reply(message);
      lastBotMessages.set(ctx.from.id, message);
      return;
    }
    
    let message = 'üìä <b>–í–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:</b>\n\n';
    answers.slice(0, 5).forEach((answer, index) => {
      const date = new Date(answer.created_at).toLocaleDateString('uk-UA');
      message += `<b>${date}</b>\n‚ùì ${answer.question_text}\nüí≠ ${answer.text}\n\n`;
    });
    
    if (answers.length > 5) {
      message += `... —Ç–∞ —â–µ ${answers.length - 5} –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π`;
    }
    
    await ctx.reply(message, { parse_mode: 'HTML' });
    lastBotMessages.set(ctx.from.id, message);
    
  } catch (error) {
    console.error('Error in answers command:', error);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
});

// Handle callback queries for time management
bot.action(/add_time_(.+)/, async (ctx) => {
  try {
    const time = ctx.match[1];
    const user = await User.findByTelegramId(ctx.from.id);
    
    if (!user) {
      return await ctx.reply('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
    }
    
    // Check if user already has 3 active reminders
    const activeCount = await ReminderTime.getActiveCount(user.id);
    if (activeCount >= 3) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –≤–∂–µ —î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å (3). –í–∏–¥–∞–ª—ñ—Ç—å –æ–¥–Ω–µ –∑ —ñ—Å–Ω—É—é—á–∏—Ö.');
      return;
    }
    
    // Add new reminder time
    await ReminderTime.create(user.id, time);
    
    await ctx.answerCbQuery(`‚úÖ –î–æ–¥–∞–Ω–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ ${time}`);
    
    // Update the message to show current reminders
    const currentReminders = await ReminderTime.findActiveByUserId(user.id);
    
    let message = '‚è∞ <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å</b>\n\n';
    message += '–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω—å (–º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–æ 3 —á–∞—Å—ñ–≤):\n\n';
    
    if (currentReminders.length > 0) {
      message += '<b>–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:</b>\n';
      currentReminders.forEach((reminder, index) => {
        message += `${index + 1}. ${reminder.time}\n`;
      });
      message += '\n';
    }
    
    // Recreate buttons
    const timeButtons = [
      [
        { text: 'üåÖ 07:00', callback_data: 'add_time_07:00' },
        { text: '‚òÄÔ∏è 09:00', callback_data: 'add_time_09:00' }
      ],
      [
        { text: 'üåû 12:00', callback_data: 'add_time_12:00' },
        { text: 'üåÜ 15:00', callback_data: 'add_time_15:00' }
      ],
      [
        { text: 'üåá 18:00', callback_data: 'add_time_18:00' },
        { text: 'üåÉ 21:00', callback_data: 'add_time_21:00' }
      ],
      [
        { text: 'üåô 22:00', callback_data: 'add_time_22:00' },
        { text: '‚è∞ –í–ª–∞—Å–Ω–∏–π —á–∞—Å', callback_data: 'custom_time' }
      ]
    ];
    
    if (currentReminders.length > 0) {
      // Add individual delete buttons for each reminder
      currentReminders.forEach((reminder, index) => {
        timeButtons.push([
          { text: `‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ ${reminder.time}`, callback_data: `remove_time_${reminder.id}` }
        ]);
      });
      
      timeButtons.push([
        { text: 'üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ', callback_data: 'remove_all_times' },
        { text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'done_times' }
      ]);
    }
    
    await ctx.editMessageText(message, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: timeButtons
      }
    });
    
  } catch (error) {
    console.error('Error adding time:', error);
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —á–∞—Å—É.');
  }
});

bot.action('remove_all_times', async (ctx) => {
  try {
    const user = await User.findByTelegramId(ctx.from.id);
    if (!user) {
      return await ctx.reply('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
    }
    
    // Get all active reminders and deactivate them
    const activeReminders = await ReminderTime.findActiveByUserId(user.id);
    for (const reminder of activeReminders) {
      await ReminderTime.deactivate(reminder.id);
    }
    
    await ctx.answerCbQuery('‚úÖ –í—Å—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ');
    
    // Update message
    const message = '‚è∞ <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å</b>\n\n–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω—å (–º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–æ 3 —á–∞—Å—ñ–≤):\n\n';
    
    const timeButtons = [
      [
        { text: 'üåÖ 07:00', callback_data: 'add_time_07:00' },
        { text: '‚òÄÔ∏è 09:00', callback_data: 'add_time_09:00' }
      ],
      [
        { text: 'üåû 12:00', callback_data: 'add_time_12:00' },
        { text: 'üåÜ 15:00', callback_data: 'add_time_15:00' }
      ],
      [
        { text: 'üåá 18:00', callback_data: 'add_time_18:00' },
        { text: 'üåÉ 21:00', callback_data: 'add_time_21:00' }
      ],
      [
        { text: 'üåô 22:00', callback_data: 'add_time_22:00' },
        { text: '‚è∞ –í–ª–∞—Å–Ω–∏–π —á–∞—Å', callback_data: 'custom_time' }
      ]
    ];
    
    await ctx.editMessageText(message, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: timeButtons
      }
    });
    
  } catch (error) {
    console.error('Error removing all times:', error);
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.');
  }
});

// Handle individual reminder deletion
bot.action(/remove_time_(.+)/, async (ctx) => {
  try {
    const reminderId = ctx.match[1];
    const user = await User.findByTelegramId(ctx.from.id);
    
    if (!user) {
      return await ctx.reply('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
    }
    
    // Get the reminder to show the time in the confirmation
    const reminder = await ReminderTime.findById(reminderId);
    if (!reminder) {
      await ctx.answerCbQuery('‚ùå –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }
    
    // Check if the reminder belongs to this user
    if (reminder.user_id !== user.id) {
      await ctx.answerCbQuery('‚ùå –¶–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –≤–∞–º.');
      return;
    }
    
    // Deactivate the reminder
    await ReminderTime.deactivate(reminderId);
    
    await ctx.answerCbQuery(`‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ ${reminder.time} –≤–∏–¥–∞–ª–µ–Ω–æ`);
    
    // Update the message to show current reminders
    const currentReminders = await ReminderTime.findActiveByUserId(user.id);
    
    let message = '‚è∞ <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å</b>\n\n';
    message += '–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω—å (–º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–æ 3 —á–∞—Å—ñ–≤):\n\n';
    
    if (currentReminders.length > 0) {
      message += '<b>–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:</b>\n';
      currentReminders.forEach((reminder, index) => {
        message += `${index + 1}. ${reminder.time}\n`;
      });
      message += '\n';
    }
    
    // Recreate buttons
    const timeButtons = [
      [
        { text: 'üåÖ 07:00', callback_data: 'add_time_07:00' },
        { text: '‚òÄÔ∏è 09:00', callback_data: 'add_time_09:00' }
      ],
      [
        { text: 'üåû 12:00', callback_data: 'add_time_12:00' },
        { text: 'üåÜ 15:00', callback_data: 'add_time_15:00' }
      ],
      [
        { text: 'üåá 18:00', callback_data: 'add_time_18:00' },
        { text: 'üåÉ 21:00', callback_data: 'add_time_21:00' }
      ],
      [
        { text: 'üåô 22:00', callback_data: 'add_time_22:00' },
        { text: '‚è∞ –í–ª–∞—Å–Ω–∏–π —á–∞—Å', callback_data: 'custom_time' }
      ]
    ];
    
    if (currentReminders.length > 0) {
      // Add individual delete buttons for each reminder
      currentReminders.forEach((reminder, index) => {
        timeButtons.push([
          { text: `‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ ${reminder.time}`, callback_data: `remove_time_${reminder.id}` }
        ]);
      });
      
      timeButtons.push([
        { text: 'üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ', callback_data: 'remove_all_times' },
        { text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'done_times' }
      ]);
    }
    
    await ctx.editMessageText(message, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: timeButtons
      }
    });
    
  } catch (error) {
    console.error('Error removing individual time:', error);
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.');
  }
});

bot.action('done_times', async (ctx) => {
  try {
    const user = await User.findByTelegramId(ctx.from.id);
    if (!user) {
      return await ctx.reply('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
    }
    
    const currentReminders = await ReminderTime.findActiveByUserId(user.id);
    
    if (currentReminders.length === 0) {
      await ctx.answerCbQuery('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å');
      return;
    }
    
    let message = '‚úÖ <b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!</b>\n\n';
    message += '–í–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –≤ —Ç–∞–∫—ñ –≥–æ–¥–∏–Ω–∏:\n';
    currentReminders.forEach((reminder, index) => {
      message += `${index + 1}. ${reminder.time}\n`;
    });
    
    await ctx.editMessageText(message, { parse_mode: 'HTML' });
    lastBotMessages.set(ctx.from.id, message);
    
  } catch (error) {
    console.error('Error finishing time setup:', error);
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.');
  }
});

bot.action('custom_time', async (ctx) => {
  try {
    userStates.set(ctx.from.id, { action: 'setting_custom_time' });
    await ctx.answerCbQuery('‚è∞ –í–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 14:30)');
    await ctx.editMessageText('‚è∞ –í–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 14:30):');
    lastBotMessages.set(ctx.from.id, '‚è∞ –í–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 14:30):');
    
  } catch (error) {
    console.error('Error setting custom time:', error);
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –≤–ª–∞—Å–Ω–æ–≥–æ —á–∞—Å—É.');
  }
});

bot.action(/answer_(.+)/, async (ctx) => {
  try {
    const questionId = ctx.match[1];
    userStates.set(ctx.from.id, { action: 'answering', questionId });
    
    await ctx.editMessageText('üí≠ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å:');
    lastBotMessages.set(ctx.from.id, 'üí≠ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å:');
    
  } catch (error) {
    console.error('Error handling answer callback:', error);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
});

// Handle text messages
bot.on('text', async (ctx) => {
  try {
    const userState = userStates.get(ctx.from.id);
    const messageText = ctx.message.text;
    
    if (!userState) {
      // Send message to n8n agent for processing
      const user = await User.findByTelegramId(ctx.from.id);
      if (user) {
        try {
          const previousBotMessage = lastBotMessages.get(ctx.from.id);
          const context = await Context.findByUserId(user.id);
          
          // Send to n8n agent for message processing
          const response = await n8nService.processMessage(messageText, user.id, previousBotMessage, context);
          
          if (response && response.output) {
            await ctx.reply(response.output);
            lastBotMessages.set(ctx.from.id, response.output);
          } else if (response && response.response) {
            await ctx.reply(response.response);
            lastBotMessages.set(ctx.from.id, response.response);
          } else {
            const message = 'üí¨ –î—è–∫—É—é –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º.';
            await ctx.reply(message);
            lastBotMessages.set(ctx.from.id, message);
          }
        } catch (error) {
          console.error('Error processing message with n8n:', error);
          const message = 'üí¨ –î—è–∫—É—é –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º.';
          await ctx.reply(message);
          lastBotMessages.set(ctx.from.id, message);
        }
      }
      return;
    }
    
    // Handle different user states
    switch (userState.action) {
      case 'adding_question':
        await handleAddQuestion(ctx, messageText);
        break;
        
      case 'answering':
        await handleAnswer(ctx, messageText, userState.questionId);
        break;
        
      case 'setting_context':
        await handleContextSetting(ctx, messageText, userState.step);
        break;
        
      case 'setting_custom_time':
        await handleCustomTime(ctx, messageText);
        break;
        
      default:
        await ctx.reply('‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
    
  } catch (error) {
    console.error('Error handling text message:', error);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
});

// Helper functions
async function handleAddQuestion(ctx, questionText) {
  try {
    const user = await User.findByTelegramId(ctx.from.id);
    const question = await Question.create(user.id, questionText, 'user');
    
    userStates.delete(ctx.from.id);
    
    const message = `‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ: "${questionText}"`;
    await ctx.reply(message);
    lastBotMessages.set(ctx.from.id, message);
    
  } catch (error) {
    console.error('Error adding question:', error);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è.');
  }
}

async function handleAnswer(ctx, answerText, questionId) {
  try {
    await questionService.handleAnswer(bot, ctx.from.id, questionId, answerText);
    userStates.delete(ctx.from.id);
    
    // Message is already sent by questionService
    lastBotMessages.set(ctx.from.id, '‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –î—è–∫—É—é –∑–∞ –≤–∞—à—É —Ä–µ—Ñ–ª–µ–∫—Å—ñ—é.');
    
  } catch (error) {
    console.error('Error handling answer:', error);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.');
  }
}

async function handleContextSetting(ctx, text, step) {
  try {
    const user = await User.findByTelegramId(ctx.from.id);
    const userState = userStates.get(ctx.from.id);
    
    switch (step) {
      case 'about_me':
        userState.context = { about_me: text };
        userState.step = 'goals';
        const goalsMessage = 'üéØ –©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –≤ —Å–≤–æ—î–º—É –∂–∏—Ç—Ç—ñ?';
        await ctx.reply(goalsMessage);
        lastBotMessages.set(ctx.from.id, goalsMessage);
        break;
        
      case 'goals':
        userState.context.goals = text;
        userState.step = 'areas';
        const areasMessage = 'üåç –Ø–∫—ñ –∫–ª—é—á–æ–≤—ñ —Å—Ñ–µ—Ä–∏ –∂–∏—Ç—Ç—è –¥–ª—è –≤–∞—Å –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ? (—Ä–æ–±–æ—Ç–∞, —Å—ñ–º\'—è, –∑–¥–æ—Ä–æ–≤\'—è, —Ç–æ—â–æ)';
        await ctx.reply(areasMessage);
        lastBotMessages.set(ctx.from.id, areasMessage);
        break;
        
      case 'areas':
        userState.context.areas = text;
        
        // Save context to database
        await Context.createOrUpdate(
          user.id,
          userState.context.about_me,
          userState.context.goals,
          userState.context.areas
        );
        
        userStates.delete(ctx.from.id);
        
        const successMessage = '‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä AI –∑–º–æ–∂–µ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –≤–∞—Å.';
        await ctx.reply(successMessage);
        lastBotMessages.set(ctx.from.id, successMessage);
        
        // Generate initial AI questions
        const aiQuestions = await aiService.generateQuestions(userState.context, []);
        if (aiQuestions.length > 0) {
          for (const aiQuestion of aiQuestions.slice(0, 3)) {
            await Question.create(user.id, aiQuestion, 'agent');
          }
          const aiMessage = 'ü§ñ –î–æ–¥–∞–Ω–æ –∫—ñ–ª—å–∫–∞ AI-–ø–∏—Ç–∞–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É!';
          await ctx.reply(aiMessage);
          lastBotMessages.set(ctx.from.id, aiMessage);
        }
        break;
    }
    
  } catch (error) {
    console.error('Error handling context setting:', error);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.');
  }
}

async function handleCustomTime(ctx, timeText) {
  try {
    const user = await User.findByTelegramId(ctx.from.id);
    
    // Validate time format (HH:MM)
    const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
    if (!timeRegex.test(timeText)) {
      await ctx.reply('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 14:30)');
      return;
    }
    
    // Check if user already has 3 active reminders
    const activeCount = await ReminderTime.getActiveCount(user.id);
    if (activeCount >= 3) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –≤–∂–µ —î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å (3). –í–∏–¥–∞–ª—ñ—Ç—å –æ–¥–Ω–µ –∑ —ñ—Å–Ω—É—é—á–∏—Ö.');
      userStates.delete(ctx.from.id);
      return;
    }
    
    // Add new reminder time
    await ReminderTime.create(user.id, timeText);
    
    userStates.delete(ctx.from.id);
    
    const message = `‚úÖ –î–æ–¥–∞–Ω–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ ${timeText}! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /settime –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏.`;
    await ctx.reply(message);
    lastBotMessages.set(ctx.from.id, message);
    
  } catch (error) {
    console.error('Error handling custom time:', error);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —á–∞—Å—É.');
    userStates.delete(ctx.from.id);
  }
}

// Error handling
bot.catch((err, ctx) => {
  console.error(`Error for ${ctx.updateType}:`, err);
  ctx.reply('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
});

module.exports = bot;
