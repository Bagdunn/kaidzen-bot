ТЗ — Telegram-бот «Kaizen Questions» (Node.js + PostgreSQL + n8n)
1. Мета проєкту

Розробити Telegram-бота, який щодня в обраний час задає користувачу 1–3 коротких «кайдзен-питання». Користувач може:

Створювати власні питання (до 3 шт.).

Задавати контекст (інформацію про себе, цілі, сфери життя).

Отримувати від ШІ-агента ідеї для питань (на основі контексту або додаткових уточнюючих питань).

Давати відповіді, які зберігаються для подальшого аналізу.

2. Архітектура

Node.js (Express.js) — серверна частина.

PostgreSQL — база даних.

Telegram Bot API (telegraf) — інтеграція з Telegram.

n8n — ШІ-агент, який допомагає генерувати питання та аналізувати відповіді.

Cron / node-cron — планування щоденних повідомлень.

3. Основні функції
3.1. Користувач

Реєстрація через Telegram (ID, username).

Налаштування:

Час отримання питань (1 раз/день).

Власні питання (до 3).

Контекст (декілька полів: «про мене», «що хочу покращити», «ключові сфери»).

Отримання питань:

Власні питання.

Запропоновані агентом (1–3).

Відповіді:

Зберігаються в БД з прив’язкою до питання і дати.

Можливість подивитися історію.

3.2. ШІ-агент (через n8n)

Класифікує повідомлення:

Звичайне спілкування.

Відповідь на питання.

Доповнення контексту.

На основі контексту і відповідей:

Задає уточнюючі питання.

Формує список щоденних «кайдзен-питань».

Зберігає відповіді як контекст (історія розвитку).

4. Структура БД (PostgreSQL)
Таблиця users
Поле	Тип	Опис
id	SERIAL PK	Унікальний ID
telegram_id	BIGINT	Telegram user_id
username	TEXT	Telegram username
question_time	TIME	Час отримання питань
created_at	TIMESTAMP	Дата реєстрації
Таблиця contexts
Поле	Тип	Опис
id	SERIAL PK	
user_id	INT FK	Посилання на users
about_me	TEXT	«Про мене»
goals	TEXT	«Що хочу покращити»
areas	TEXT	«Ключові сфери життя»
updated_at	TIMESTAMP	
Таблиця questions
Поле	Тип	Опис
id	SERIAL PK	
user_id	INT FK	Посилання на users
text	TEXT	Текст питання
source	TEXT	«user» / «agent»
active	BOOLEAN	Активне чи ні
created_at	TIMESTAMP	
Таблиця answers
Поле	Тип	Опис
id	SERIAL PK	
user_id	INT FK	Посилання на users
question_id	INT FK	Посилання на questions
text	TEXT	Відповідь
created_at	TIMESTAMP	
5. API (Express.js)

POST /register — створення користувача.

POST /context — оновлення контексту.

GET /context — отримання контексту.

POST /questions — створення власних питань.

GET /questions — список активних питань.

POST /answers — запис відповіді.

GET /answers — історія відповідей.

6. Telegram-бот (Telegraf)

Команди:

/start — реєстрація.

/settime — задати час отримання питань.

/addquestion — додати власне питання.

/context — оновити контекст.

/questions — переглянути питання.

/answers — переглянути історію.

Щоденна відправка питань за розкладом.

Інтеграція з n8n: пересилання повідомлень користувача для класифікації.

7. Інтеграція з n8n

Вебхук від бота → n8n:

Вхідні повідомлення користувача.

n8n класифікує → повертає тип.

Якщо «контекст» → зберегти у contexts.

Якщо «відповідь» → зберегти у answers.

Якщо «звичайне» → бот відповідає small talk.

Запит на генерацію питань:

n8n аналізує контекст.

Повертає список питань у БД questions.

8. Безпека

Авторизація за Telegram ID.

HTTPS (якщо деплой у прод).

Мінімальний обсяг збережених персональних даних.

9. Roadmap

MVP:

Telegram бот + розсилка питань за часом.

Зберігання відповідей.

Контекст + кастомні питання.

Інтеграція з n8n (генерація питань).

Історія + експорт відповідей (CSV).

10. Definition of Done

Бот працює в Telegram.

Користувач отримує питання щодня.

Може додати власні питання та контекст.

Відповіді зберігаються.

n8n може генерувати питання на базі контексту.